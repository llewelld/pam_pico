/**
@mainpage

\section pam_pico pam_pico Overview

<b>Version $(VERSION)</b>

\subsection summary Summary

This manual documents `pam_pico` version $(VERSION). `pam_pico` is a Pluggable Authentication Module (PAM) which, once installed and configured, allows you to log in to your computer using Pico.

\subsection structure Documentation structure

If you're a developer and are interested in conbtributing to the source code, the API documentation linked to above may be of interest. This gives an idea about what the different parts of the source code do.

However, most people will just want to use the PAM as quickly as possible. If this is you, everything you need to know should be on this page.

\subsection linuxinstall Linux installation

The installation instructions below assume you're using Ubuntu 16.04. It will build and run on other systems, but you'll need to adjust the instructions to suit your platform if you're using something else.

\subsubsection linuxinstallbinrun Runtime binary installation

If you're running Ubuntu 16.04 you can install `pam_pico` directly from the Pico PPA. Enter the following commands to add the PPA to your system:

\verbatim
sudo add-apt-repository ppa:mypico/ppa
sudo apt-get update
\endverbatim

Then install `pam_pico` using the following commands. As well as `pam_pico`, this will also automatically install all of its dependencies.

\verbatim
sudo apt install pam_pico
\endverbatim

If you don't want to add the Pico PPA, you can also download the latest package from the [Pico website](https:mypico.org). You'll need to install all of the dependencies yourself if you do it this way.

 - libpicobt-run, version 0.0.1 or later
 - libpico-run, version 0.0.1 or later
 - libssl, version 1.0.0 or later
 - libcurl3
 - libqrencode3
 - libbluetooth3, version 4.91 or later
 - liburl-dispatcher1
 - libc6, version 2.14 or later
 - gksu

See the [libpicobt](../libpicobt) documentation for how to install libpicobt-run, and see the [libpico](../libpico) documentation for how to install libpico-run. Apart from this, on Ubuntu 16.04 the remainder of these dependencies can be installed as follows.

\verbatim
sudo apt install libssl1.0.0 libcurl3 libqrencode3 libbluetooth3 liburl-dispatcher1 libc6 gksu
\endverbatim

Then use the following to install `pam_pico`:

<pre class="fragment">
sudo dpkg -i libpam-pico_$(VERSION)-1_amd64.deb
</pre>

This will install the `pan_pico` PAM, the `pico-continuous` service and the `pico-pair` pairing tool.

\subsection build Building from source

To build on Linux you'll need the following (at least):

 - libpicobt-run, version 0.0.1 or later
 - libpicobt-dev, version 0.0.1 or later
 - libpico-run, version 0.0.1 or later
 - libpico-dev, version 0.0.1 or later
 - libssl-dev
 - libcurl4-openssl-dev
 - libqrencode-dev
 - libbluetooth-dev, version 4.91 or later
 - liburl-dispatcher1-dev
 - libc6, version 2.14 or later
 - libsoup2.4-dev
 - libglib2.0-dev
 - libdbus-glib-1-dev
 - libgtk-3-dev
 - libpam0g-dev
 - gcovr
 - gksu
 - pkg-config
 - autoconf
 - autotools-dev
 - devscripts
 - debhelper
 - dh-systemd
 - dh-exec
 - build-essential
 - git
 - gcc
 - make
 - check
 - openssh-client
 - libtool
 - doxygen
 - graphviz

See the [libpicobt](../libpicobt) documentation for how to install libpicobt-run and libpicobt-dev, and see the [libpico](../libpico) documentation for how to install libpico-run and libpico-dev. Apart from this, on Ubuntu 16.04 the remainder of these dependencies can be installed as follows.

\verbatim
sudo apt install \
  libssl-dev libcurl4-openssl-dev libqrencode-dev libbluetooth-dev liburl-dispatcher1-dev libc6 \
  libsoup2.4-dev libglib2.0-dev libdbus-glib-1-dev libgtk-3-dev libpam0g-dev gconv gksu \
  autoconf pkg-config autotools-dev devscripts debhelper dh-systemd dh-exec build-essential \
  git gcc make check openssh-client libtooldoxygen graphviz
\endverbatim

Now grab yourself a copy of the code from the repository and compile it.

\verbatim
git clone git@github.com:mypico/pam_pico.git
cd pam_pico
./configure
make
make check
\endverbatim

The last command runs the unit tests, so isn't strictly required, but is useful for reassurance that everything built correctly. To generate the DEB packages on a Debian-based system run something like the following:

\verbatim
debuild -us -uc -b --lintian-opts -X changes-file
\endverbatim

This will build the pam_pico package and leave it in the parent directory. You can now install this package so it's ready for use on your system.

<pre class="fragment">
sudo dpkg -i ../libpam-pico_$(VERSION)-1_amd64.deb
</pre>

The documentation you're reading now was generated using doxygen. If you want to generate it yourself you do so as follows.

\verbatim
make doxygen
\endverbatim

\subsection logs Log files

All of the applications installed by `pam_pico` write logs using syslog. The default location for log output is `/var/log/syslog`.

\subsection configure Configuring the system

Once the `pam_pico` package has been installed, you'll be forgiven for thinking that nothing has changed. That's because in order to make use of it, you'll also need to configure your PAM stack to call the new module. This involves adding a line to the configuration file for each application using the PAM stack, where you want Pico to be used instead of passwords. Each of these configuration files can be found in `/etc/pam.d`.

The instructions in the \ref configure-pam section explains how to do this. You may also want to configure the `pico-continuous` service, as explained in section \ref configure-service, however this second step is optional.

In theory you can use `pam_pico` with any of the applications that appear in the `/etc/pam.d` directory. We've tested it with unity, lightdm-greeter, gnome-screensave, ssh and sudo. However, we'd advise caution before using it with sudo, at least initially, since if something goes wrong you'll need a working sudo to fix it.

\subsubsection configure-pam Configuring pam_pico

There are many good guides about how to use PAM, such as the very thorough <a href="http://linux-pam.org/Linux-PAM-html/Linux-PAM_SAG.html">Linux-PAM System Administrators' Guide</a>. We provide just a brief overview here. If you're already familiar with PAM configuration, you should be able to get what you need from the `pam_pico` man page.

Having installed the packages, you will still need to add the `pam_pico` shared
object to your PAM stack. You can do this by editing the files in the
`/etc/pam.d` folder.

Each of the files in this folder corresponds to an application that makes use
of PAM for authentication. For example you may find files for `sudo`, `unity`,
`lightdm` and `login` in here.

For each of the applications you want Pico to work with, you'll have to add
`pam_pico` to the appropriate file in this folder.

Let's consider an example. Suppose you want to add Pico functionality to unity.
Open the `unity` file in a text editor. You should see something like this:

\verbatim
@include common-auth
auth optional pam_gnome_keyring.so
\endverbatim

That's a fairly basic PAM config file (the actual hard work is going on inside
the `common-auth` file that's included in this one).

To add Pico functionality, you'd need to add a new line to the top of the file, as well as commenting out the `@include` line, like this.

\verbatim
auth    required /usr/lib/x86_64-linux-gnu/security/pam_pico.so beacons=1 anyuser=1 input=0 qrtype=none channeltype=btc continuous=1 timeout=0
#@include common-auth
auth optional pam_gnome_keyring.so
\endverbatim

As you can see we've added an `auth` line. Here's what the various parts of this additional line
mean:

 1. `auth` means that we're adding a module for *authentication*.
 2. `requisite` means that if authentication fails with this module, the
 overall authentication will fail, and no more lines will be executed.
 3. `/usr/lib/x86_64-linux-gnu/security/pam_pico.so` is a reference to the
 `pam_pico` module. This means the task of authentication will be handled
 by this module.
 4. `beacons=1 anyuser=1 input=0 qrtype=none channeltype=btc continuous=1 timeout=0`
 are arguments passed to the `pam_pico` module. These are briefly described below.

The arguments that can be added to the end of the line are the following. Some of these can also be added to the service configuration file (see the {@link configure-service} section), but values added as arguments as shown here override those in the configuration file.

 - `channeltype=`

   This can be set to either `rvp` or `btc`; for example `channeltype=btc`. This sets the channel to use for authentication. The parameters represent an HTTP(S) rendezvous point channel, or a Bluetooth Classic channel respectively.

 - `continuous=`

   This can be set to either `0` or `1`, for example `continuous=1``. When set to `1`, continuous authentication will be performed. This means that Pico will continue periodic authentications with the pico-continuous service. If authentication fails for whatever reason (for example, the Pico moves out of Bluetooth range) then a signal will be made to lock the session.

 - `beacons=`

   This can be set to either `0` or `1`, for example `beacons=1``. When set to `1`, beacons will be sent to nearby Picos using Bluetooth classic, notifying them that they can attempt authentication. This is an alternative to scanning the QR code. This is most useful when the channel is set to be Bluetooth, but will also work for a rendezvous point channel.

 - `anyuser=`

   This can be set to either `0` or `1`, for example `anyuser=1`. The module can either authenticate a specific user (passed through a PAM variable), or it can determine the user to authenticate based on the key used by the Pico. A simple way to appreciate the distinction is to consider the difference between the login process and the unlock process. In the former case, any user can log in and the correct session will be loaded for that user. In the latter case, only the user with the locked session is entitled to unlock it. Setting this flag to `1` will allow any user to authenticate against the module. It's important to get this right, since otherwise you may find any user can unlock a particular user's locked session.

 - `qrtype=`

   Set the style of output to use for the displayed QR code. Possible values are: `json` to return a JSON string rather than a QR code; `color_utf8` for compact output that will work on a colour-enabled UTF8 terminal; `colorless_utf8` for compact output that will display in black and white on a UTF8 terminal; `ansi` for black and white output, two characters per pizel; `tt_tag` which produdes the same output as colorless_utf8, but surrounded by &lt;tt&gt; tags; `none` to display no output at all. For example `qrtype=color_utf8`.

 - `input=`

   This can be set to either `0` or `1`, for example `input=1``. When set to `1`, the module will request user input; when set to `0` it will not request any input. Depending on the PAM client implementation, input may be required to ensure the Pico response is collected. (e.g. ssh) In other implementations, asking for a response will block the authentication from proceeding until the user has hit the enter key. This flag allows the input request to be controlled to take account of these different implementation specifics.

 - `timeout=`

   This takes an integer value, for example `timeout=40`. This sets the length of time in seconds `pam_pico` will block until it decides that no Pico is going to authenticate to it. If this time limit is reached, it will return, indicating that authentication failed. A value of 0 indicates that there should be no timeout: `pam_pico` will block indefinitely.

 - `rvpurl=`

   This takes a string representing a URL, for example `rvpurl=https://rendezvous.mypico.org`. This URL is used for the address of the rendezvous point. This parameter is only used if `channeltype=rvp` is also set.

 - `configdir=`

   This takes a string representing a directory path, for example `configdir=/etc/pam_pico`. This directory will be used as the location from which to load in the configuration file, the service's public/private key, the user list and the list of Bluetooth devices to beacon.

\subsubsection configure-service Configuring pico-continuous

The `pico-continuous` service is run as a systemd daemon. It can be controlled using the `systemctl` command. For example:

\verbatim
systemctl status pico-continuous.service
\endverbatim

Once installed the service is configured to run at start up and stay running continuously until the system is shut down. In order to use Pico, you should leave the service running.

Many of the configuration options that can be passed as arguments to `pam_pico` are actually passed directly on to the `pico-continuous` service, which performs the actual authentication with your Pico. Rather than add these options to the command line, they can also be configured in the `config.txt` configuration file. This file is found by default in the `/etc/pam-pico` directory, but its location can also be configured by adding a `configdir=` parameter as an argument to `pam_pico` (see above).

The `config.txt` file is optional, but if it does exist it must be formatted as a <a href="http://json.org/">JSON</a> file. Below are the possible key-value pairs allowed in this file.

 - `channeltype`

    This can take a value of either `rvp` or `btc`. The former will use HTTP(S) as the authentication channel, routed via a rendezvous point. The latter will use Bluetooth Classic for the authentication channel. In either case the channel is considered untrusted, which means Pico provides its own confidential and authentic channel on top of the method used. The default value is `rvp`.
    
 - `continuous`

   This can take a value of either 0 or 1, and prescribes whether continuous authentication should be used or not. Use 1 to use continuous authentication, 0 otherwise. The default value is 0.

 - `beacons`

   This can take a value of either 0 or 1, and prescribes whether Bluetooth Classic beacons are sent out advertising to nearby Picos. A nearby Pico that hears the beacon and is paired with the device will offer to the user to authenticate, or potentially authenticate automatically depending on how the Pico app is configured. The default value is 0.

 - `anyuser`

   This can take a value of either 0 or 1. If set to 0, `pam_pico` will expect a specific user to log in. This reflects the case where a user has locked their machine, so only they are entitled to unlock it. If this is set to 1, any user paired with the system can authenticate. This reflects the case of a login screen, where any user with an account is entitled to log in. The default value is 0.

 - `timeout`

   This takes an integer value and sets the length of time in seconds `pam_pico` will block until it decides that no Pico is going to authenticate to it. If this time limit is reached, it will return, indicating that authentication failed. A value of 0 indicates that there should be no timeout: `pam_pico` will block indefinitely.

 - `rvpurl`

   This takes a string representing a URL. This URL is used for the address of the rendezvous point. This parameter is only used if a Rendezvous Point channel is being used.

 - `configdir`

   This takes a string representing a directory path. This directory will be used as the location from which to load in the configuration file, the service's public/private key, the user list and the list of Bluetooth devices to beacon.

Not all options need to be included in the file. If they're not the default is used. However, note also that any of the values in the `config.txt` will be overriden by any values specified as arguments to the PAM. An example `config.txt` file might look something like the following.

\verbatin
{
  "continuous"  : 1,
  "channeltype" : "btc",
  "beacons"     : 1,
  "rvpurl"      : "https://rendezvous.mypico.org"
}
\endverbatin

For more information about the `pico-continuous` service you can also refer to its man page.

\subsubsection pairing Pairing your Pico app with your computer

Having installed and configured `pam_pico`, you must now pair with the system before you can use it. Each user who wants to authenticate to the system using the Pico app must follow the same process.

Pairing is performed using the `pico-pair` application. The application has to run as root in order to get write-access to the keypairing directory on the system. It also takes various command line arguments. For full details of these arguments check the `pico-pair` man page.

To use the default terminal interface you can use the following command:

\verbatim
sudo pico-pair --user $USER
\endverbatim

This will ask you to enter your user password, before displaying a QR code on the terminal that you'll need to scan with your Pico app.

The GUI version walks you through the process a little more gently. This can be started by entering `pico-pair` on the Unity dash, or by entering the following command at the terminal.

\verbatim
gksu "pico-pair --gui --user $USER"
\endverbatim

In both cases, you'll also need to ensure your phone is *bluetooth paired* with your computer. Bluetooth pairing can be performed through the System Settings panel on Ubuntu, or through the <a href="https://help.ubuntu.com/stable/ubuntu-help/bluetooth-connect-device.html">Bluetooth icon on the menu bar</a>.

Once you've configured `pam_pico`, paired using `pico-pair` and established a trusted Bluetooth pairing between your computer and your phone, you're ready to authenticate using Pico without the need for passwords.

\subsection story A story

<em>[If you've got this far, you deserve something a little different.]</em>

The air was still damp from the rain and McCreedy felt the gravel crunch under his feet, lubricated by the puddles of water. He moved around the crime scene. He'd seen plenty of nasty murders before, but none of them quite so cold, so calculated, as what he was looking at right now.

O'Neal, the pathologist on call that night, had covered the body in a sheet, hiding the worst of it. On the left-hand side of the body, just next to the dead man's shoulder, was a pot of green paint. On the right had side, at knee-height, the paint had been used to write the initials BMC on the ground. Just touching the man's fingers, a police-issue pistol.

But this was no policeman. The gun didn't belong to the victim, and nor had the letters been written by him either. That part McCreedy had established as soon as he'd arrived at the scene, before O'Neal had done her work.

Yes, this wasn't a man who'd scrawled a final, last note of accusation on the ground next to him. This was a man who'd fallen ten storeys from a building, landing on top of an accusation scrawled on the floor several hours before.

"Inexplicable, don't you think?" O'Neal had sauntered up alongside. "How does a man fall ten storeys with his pockets full of eggs, but without breaking a single one?".

McCreedy looked back at O'Neal thoughtfully. "Inexcusable? Yes. Inexplicable? Not at all." This was no inexplicable situation; McCreedy knew exactly what had happened. More to the point, he knew exactly who was responsible for murdering the man too. What he didn't yet know, and what he knew he had to find out, was how he was going to prove it.

\subsection authors Authors

The pam_pico code was created by the <a href="https://mypico.org">Pico Team</a>.

*/

/**
 * @defgroup Service pico-continuous
 * @brief The `pico-continuous` systemd service
 *
 * Although `pam_pico` is used to kick-off the authentication, the actual work
 * is performed by the pico-continous service. pam_pico calls the service using
 * dbus, and the service then interacts with the Pico app.
 * 
 */

/**
 * @defgroup PAM pam_pico
 * @brief The `pam_pico` Pluggable Authentication Module
 *
 * A PAM is used to log in to your Linux machine. When you log in to the
 * desktop, or type your password after using `sudo`, PAM is what actually does
 * the work. The `pam_pico` PAM allows you to authenticate to your computer
 * using the Pico app rather than using a password.
 * 
 */

/**
 * @defgroup Pairing pico-pair
 * @brief The `pico-pair` app is for pairing your Pico app with your computer.
 *
 * Before you can log in usin the Pico app, you must first pair the app with
 * your machine. The `pico-pair` app allows you to perform this pairing, either
 * using a GUI wizard or on the command line.
 * 
 */

/**
 * @defgroup Testing Testing
 * @brief Test and example code.
 *
 * This code isn't needed to run Pico, but it may provide useful tests or
 * example code if you're trying to understand how things fit together
 * and work.
 * 
 */



